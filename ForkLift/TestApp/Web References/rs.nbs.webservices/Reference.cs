//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.225.
// 
#pragma warning disable 1591

namespace TestApp.rs.nbs.webservices {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExchangeRateServiceSoap", Namespace="http://communicationoffice.nbs.rs")]
    public partial class ExchangeRateService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private AuthenticationHeader authenticationHeaderValueField;
        
        private System.Threading.SendOrPostCallback GetServiceVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateListCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateListCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateListTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateByCurrencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateByListNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentExchangeRateListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentExchangeRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentExchangeRateByRateTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateByRateTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateRsdEurOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateRsdEurByPeriodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentExchangeRateRsdEurOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateRsdEurTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateByCurrencyExtendedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateAverageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ExchangeRateService() {
            this.Url = global::TestApp.Properties.Settings.Default.TestApp_rs_nbs_webservices_ExchangeRateService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public AuthenticationHeader AuthenticationHeaderValue {
            get {
                return this.authenticationHeaderValueField;
            }
            set {
                this.authenticationHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetServiceVersionCompletedEventHandler GetServiceVersionCompleted;
        
        /// <remarks/>
        public event GetExchangeRateListCountCompletedEventHandler GetExchangeRateListCountCompleted;
        
        /// <remarks/>
        public event GetExchangeRateListCompletedEventHandler GetExchangeRateListCompleted;
        
        /// <remarks/>
        public event GetExchangeRateListCommentCompletedEventHandler GetExchangeRateListCommentCompleted;
        
        /// <remarks/>
        public event GetExchangeRateListTypeCompletedEventHandler GetExchangeRateListTypeCompleted;
        
        /// <remarks/>
        public event GetExchangeRateByCurrencyCompletedEventHandler GetExchangeRateByCurrencyCompleted;
        
        /// <remarks/>
        public event GetExchangeRateByDateCompletedEventHandler GetExchangeRateByDateCompleted;
        
        /// <remarks/>
        public event GetExchangeRateByListNumberCompletedEventHandler GetExchangeRateByListNumberCompleted;
        
        /// <remarks/>
        public event GetCurrentExchangeRateListCompletedEventHandler GetCurrentExchangeRateListCompleted;
        
        /// <remarks/>
        public event GetCurrentExchangeRateCompletedEventHandler GetCurrentExchangeRateCompleted;
        
        /// <remarks/>
        public event GetCurrentExchangeRateByRateTypeCompletedEventHandler GetCurrentExchangeRateByRateTypeCompleted;
        
        /// <remarks/>
        public event GetExchangeRateByRateTypeCompletedEventHandler GetExchangeRateByRateTypeCompleted;
        
        /// <remarks/>
        public event GetExchangeRateRsdEurCompletedEventHandler GetExchangeRateRsdEurCompleted;
        
        /// <remarks/>
        public event GetExchangeRateRsdEurByPeriodCompletedEventHandler GetExchangeRateRsdEurByPeriodCompleted;
        
        /// <remarks/>
        public event GetCurrentExchangeRateRsdEurCompletedEventHandler GetCurrentExchangeRateRsdEurCompleted;
        
        /// <remarks/>
        public event GetExchangeRateRsdEurTypeCompletedEventHandler GetExchangeRateRsdEurTypeCompleted;
        
        /// <remarks/>
        public event GetExchangeRateByCurrencyExtendedCompletedEventHandler GetExchangeRateByCurrencyExtendedCompleted;
        
        /// <remarks/>
        public event GetExchangeRateAverageCompletedEventHandler GetExchangeRateAverageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetServiceVersion", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceVersion() {
            object[] results = this.Invoke("GetServiceVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceVersionAsync() {
            this.GetServiceVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetServiceVersionAsync(object userState) {
            if ((this.GetServiceVersionOperationCompleted == null)) {
                this.GetServiceVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceVersionOperationCompleted);
            }
            this.InvokeAsync("GetServiceVersion", new object[0], this.GetServiceVersionOperationCompleted, userState);
        }
        
        private void OnGetServiceVersionOperationCompleted(object arg) {
            if ((this.GetServiceVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceVersionCompleted(this, new GetServiceVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateListCount", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetExchangeRateListCount([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> exchangeRateListNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> year, string date, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> exchangeRateListTypeID) {
            object[] results = this.Invoke("GetExchangeRateListCount", new object[] {
                        exchangeRateListNumber,
                        year,
                        date,
                        exchangeRateListTypeID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateListCountAsync(System.Nullable<int> exchangeRateListNumber, System.Nullable<int> year, string date, System.Nullable<int> exchangeRateListTypeID) {
            this.GetExchangeRateListCountAsync(exchangeRateListNumber, year, date, exchangeRateListTypeID, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateListCountAsync(System.Nullable<int> exchangeRateListNumber, System.Nullable<int> year, string date, System.Nullable<int> exchangeRateListTypeID, object userState) {
            if ((this.GetExchangeRateListCountOperationCompleted == null)) {
                this.GetExchangeRateListCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateListCountOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateListCount", new object[] {
                        exchangeRateListNumber,
                        year,
                        date,
                        exchangeRateListTypeID}, this.GetExchangeRateListCountOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateListCountOperationCompleted(object arg) {
            if ((this.GetExchangeRateListCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateListCountCompleted(this, new GetExchangeRateListCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateList", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> exchangeRateListNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> year, string date, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> exchangeRateListTypeID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<long> startItemNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<long> endItemNumber) {
            object[] results = this.Invoke("GetExchangeRateList", new object[] {
                        exchangeRateListNumber,
                        year,
                        date,
                        exchangeRateListTypeID,
                        startItemNumber,
                        endItemNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateListAsync(System.Nullable<int> exchangeRateListNumber, System.Nullable<int> year, string date, System.Nullable<int> exchangeRateListTypeID, System.Nullable<long> startItemNumber, System.Nullable<long> endItemNumber) {
            this.GetExchangeRateListAsync(exchangeRateListNumber, year, date, exchangeRateListTypeID, startItemNumber, endItemNumber, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateListAsync(System.Nullable<int> exchangeRateListNumber, System.Nullable<int> year, string date, System.Nullable<int> exchangeRateListTypeID, System.Nullable<long> startItemNumber, System.Nullable<long> endItemNumber, object userState) {
            if ((this.GetExchangeRateListOperationCompleted == null)) {
                this.GetExchangeRateListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateListOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateList", new object[] {
                        exchangeRateListNumber,
                        year,
                        date,
                        exchangeRateListTypeID,
                        startItemNumber,
                        endItemNumber}, this.GetExchangeRateListOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateListOperationCompleted(object arg) {
            if ((this.GetExchangeRateListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateListCompleted(this, new GetExchangeRateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateListComment", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateListComment(System.Guid exchangeRateListID) {
            object[] results = this.Invoke("GetExchangeRateListComment", new object[] {
                        exchangeRateListID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateListCommentAsync(System.Guid exchangeRateListID) {
            this.GetExchangeRateListCommentAsync(exchangeRateListID, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateListCommentAsync(System.Guid exchangeRateListID, object userState) {
            if ((this.GetExchangeRateListCommentOperationCompleted == null)) {
                this.GetExchangeRateListCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateListCommentOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateListComment", new object[] {
                        exchangeRateListID}, this.GetExchangeRateListCommentOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateListCommentOperationCompleted(object arg) {
            if ((this.GetExchangeRateListCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateListCommentCompleted(this, new GetExchangeRateListCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateListType", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateListType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> exchangeRateListTypeID) {
            object[] results = this.Invoke("GetExchangeRateListType", new object[] {
                        exchangeRateListTypeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateListTypeAsync(System.Nullable<int> exchangeRateListTypeID) {
            this.GetExchangeRateListTypeAsync(exchangeRateListTypeID, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateListTypeAsync(System.Nullable<int> exchangeRateListTypeID, object userState) {
            if ((this.GetExchangeRateListTypeOperationCompleted == null)) {
                this.GetExchangeRateListTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateListTypeOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateListType", new object[] {
                        exchangeRateListTypeID}, this.GetExchangeRateListTypeOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateListTypeOperationCompleted(object arg) {
            if ((this.GetExchangeRateListTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateListTypeCompleted(this, new GetExchangeRateListTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateByCurrency", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateByCurrency(int currencyCode, string dateFrom, string dateTo, int exchangeRateListTypeID) {
            object[] results = this.Invoke("GetExchangeRateByCurrency", new object[] {
                        currencyCode,
                        dateFrom,
                        dateTo,
                        exchangeRateListTypeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateByCurrencyAsync(int currencyCode, string dateFrom, string dateTo, int exchangeRateListTypeID) {
            this.GetExchangeRateByCurrencyAsync(currencyCode, dateFrom, dateTo, exchangeRateListTypeID, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateByCurrencyAsync(int currencyCode, string dateFrom, string dateTo, int exchangeRateListTypeID, object userState) {
            if ((this.GetExchangeRateByCurrencyOperationCompleted == null)) {
                this.GetExchangeRateByCurrencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateByCurrencyOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateByCurrency", new object[] {
                        currencyCode,
                        dateFrom,
                        dateTo,
                        exchangeRateListTypeID}, this.GetExchangeRateByCurrencyOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateByCurrencyOperationCompleted(object arg) {
            if ((this.GetExchangeRateByCurrencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateByCurrencyCompleted(this, new GetExchangeRateByCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateByDate", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateByDate(string date, int exchangeRateListTypeID) {
            object[] results = this.Invoke("GetExchangeRateByDate", new object[] {
                        date,
                        exchangeRateListTypeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateByDateAsync(string date, int exchangeRateListTypeID) {
            this.GetExchangeRateByDateAsync(date, exchangeRateListTypeID, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateByDateAsync(string date, int exchangeRateListTypeID, object userState) {
            if ((this.GetExchangeRateByDateOperationCompleted == null)) {
                this.GetExchangeRateByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateByDateOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateByDate", new object[] {
                        date,
                        exchangeRateListTypeID}, this.GetExchangeRateByDateOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateByDateOperationCompleted(object arg) {
            if ((this.GetExchangeRateByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateByDateCompleted(this, new GetExchangeRateByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateByListNumber", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateByListNumber(int exchangeRateListNumber, int year, int exchangeRateListTypeID) {
            object[] results = this.Invoke("GetExchangeRateByListNumber", new object[] {
                        exchangeRateListNumber,
                        year,
                        exchangeRateListTypeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateByListNumberAsync(int exchangeRateListNumber, int year, int exchangeRateListTypeID) {
            this.GetExchangeRateByListNumberAsync(exchangeRateListNumber, year, exchangeRateListTypeID, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateByListNumberAsync(int exchangeRateListNumber, int year, int exchangeRateListTypeID, object userState) {
            if ((this.GetExchangeRateByListNumberOperationCompleted == null)) {
                this.GetExchangeRateByListNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateByListNumberOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateByListNumber", new object[] {
                        exchangeRateListNumber,
                        year,
                        exchangeRateListTypeID}, this.GetExchangeRateByListNumberOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateByListNumberOperationCompleted(object arg) {
            if ((this.GetExchangeRateByListNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateByListNumberCompleted(this, new GetExchangeRateByListNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetCurrentExchangeRateList", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCurrentExchangeRateList(int exchangeRateListTypeID) {
            object[] results = this.Invoke("GetCurrentExchangeRateList", new object[] {
                        exchangeRateListTypeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentExchangeRateListAsync(int exchangeRateListTypeID) {
            this.GetCurrentExchangeRateListAsync(exchangeRateListTypeID, null);
        }
        
        /// <remarks/>
        public void GetCurrentExchangeRateListAsync(int exchangeRateListTypeID, object userState) {
            if ((this.GetCurrentExchangeRateListOperationCompleted == null)) {
                this.GetCurrentExchangeRateListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentExchangeRateListOperationCompleted);
            }
            this.InvokeAsync("GetCurrentExchangeRateList", new object[] {
                        exchangeRateListTypeID}, this.GetCurrentExchangeRateListOperationCompleted, userState);
        }
        
        private void OnGetCurrentExchangeRateListOperationCompleted(object arg) {
            if ((this.GetCurrentExchangeRateListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentExchangeRateListCompleted(this, new GetCurrentExchangeRateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetCurrentExchangeRate", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCurrentExchangeRate(int exchangeRateListTypeID) {
            object[] results = this.Invoke("GetCurrentExchangeRate", new object[] {
                        exchangeRateListTypeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentExchangeRateAsync(int exchangeRateListTypeID) {
            this.GetCurrentExchangeRateAsync(exchangeRateListTypeID, null);
        }
        
        /// <remarks/>
        public void GetCurrentExchangeRateAsync(int exchangeRateListTypeID, object userState) {
            if ((this.GetCurrentExchangeRateOperationCompleted == null)) {
                this.GetCurrentExchangeRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentExchangeRateOperationCompleted);
            }
            this.InvokeAsync("GetCurrentExchangeRate", new object[] {
                        exchangeRateListTypeID}, this.GetCurrentExchangeRateOperationCompleted, userState);
        }
        
        private void OnGetCurrentExchangeRateOperationCompleted(object arg) {
            if ((this.GetCurrentExchangeRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentExchangeRateCompleted(this, new GetCurrentExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetCurrentExchangeRateByRateType", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public decimal GetCurrentExchangeRateByRateType(int currencyCode, int exchangeRateListTypeID, int rateType) {
            object[] results = this.Invoke("GetCurrentExchangeRateByRateType", new object[] {
                        currencyCode,
                        exchangeRateListTypeID,
                        rateType});
            return ((decimal)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentExchangeRateByRateTypeAsync(int currencyCode, int exchangeRateListTypeID, int rateType) {
            this.GetCurrentExchangeRateByRateTypeAsync(currencyCode, exchangeRateListTypeID, rateType, null);
        }
        
        /// <remarks/>
        public void GetCurrentExchangeRateByRateTypeAsync(int currencyCode, int exchangeRateListTypeID, int rateType, object userState) {
            if ((this.GetCurrentExchangeRateByRateTypeOperationCompleted == null)) {
                this.GetCurrentExchangeRateByRateTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentExchangeRateByRateTypeOperationCompleted);
            }
            this.InvokeAsync("GetCurrentExchangeRateByRateType", new object[] {
                        currencyCode,
                        exchangeRateListTypeID,
                        rateType}, this.GetCurrentExchangeRateByRateTypeOperationCompleted, userState);
        }
        
        private void OnGetCurrentExchangeRateByRateTypeOperationCompleted(object arg) {
            if ((this.GetCurrentExchangeRateByRateTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentExchangeRateByRateTypeCompleted(this, new GetCurrentExchangeRateByRateTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateByRateType", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public decimal GetExchangeRateByRateType(int currencyCode, string date, int exchangeRateListTypeID, int rateType) {
            object[] results = this.Invoke("GetExchangeRateByRateType", new object[] {
                        currencyCode,
                        date,
                        exchangeRateListTypeID,
                        rateType});
            return ((decimal)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateByRateTypeAsync(int currencyCode, string date, int exchangeRateListTypeID, int rateType) {
            this.GetExchangeRateByRateTypeAsync(currencyCode, date, exchangeRateListTypeID, rateType, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateByRateTypeAsync(int currencyCode, string date, int exchangeRateListTypeID, int rateType, object userState) {
            if ((this.GetExchangeRateByRateTypeOperationCompleted == null)) {
                this.GetExchangeRateByRateTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateByRateTypeOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateByRateType", new object[] {
                        currencyCode,
                        date,
                        exchangeRateListTypeID,
                        rateType}, this.GetExchangeRateByRateTypeOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateByRateTypeOperationCompleted(object arg) {
            if ((this.GetExchangeRateByRateTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateByRateTypeCompleted(this, new GetExchangeRateByRateTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateRsdEur", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateRsdEur(string date, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> typeID) {
            object[] results = this.Invoke("GetExchangeRateRsdEur", new object[] {
                        date,
                        typeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateRsdEurAsync(string date, System.Nullable<int> typeID) {
            this.GetExchangeRateRsdEurAsync(date, typeID, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateRsdEurAsync(string date, System.Nullable<int> typeID, object userState) {
            if ((this.GetExchangeRateRsdEurOperationCompleted == null)) {
                this.GetExchangeRateRsdEurOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateRsdEurOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateRsdEur", new object[] {
                        date,
                        typeID}, this.GetExchangeRateRsdEurOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateRsdEurOperationCompleted(object arg) {
            if ((this.GetExchangeRateRsdEurCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateRsdEurCompleted(this, new GetExchangeRateRsdEurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateRsdEurByPeriod", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateRsdEurByPeriod(string dateFrom, string dateTo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> typeID) {
            object[] results = this.Invoke("GetExchangeRateRsdEurByPeriod", new object[] {
                        dateFrom,
                        dateTo,
                        typeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateRsdEurByPeriodAsync(string dateFrom, string dateTo, System.Nullable<int> typeID) {
            this.GetExchangeRateRsdEurByPeriodAsync(dateFrom, dateTo, typeID, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateRsdEurByPeriodAsync(string dateFrom, string dateTo, System.Nullable<int> typeID, object userState) {
            if ((this.GetExchangeRateRsdEurByPeriodOperationCompleted == null)) {
                this.GetExchangeRateRsdEurByPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateRsdEurByPeriodOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateRsdEurByPeriod", new object[] {
                        dateFrom,
                        dateTo,
                        typeID}, this.GetExchangeRateRsdEurByPeriodOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateRsdEurByPeriodOperationCompleted(object arg) {
            if ((this.GetExchangeRateRsdEurByPeriodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateRsdEurByPeriodCompleted(this, new GetExchangeRateRsdEurByPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetCurrentExchangeRateRsdEur", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCurrentExchangeRateRsdEur() {
            object[] results = this.Invoke("GetCurrentExchangeRateRsdEur", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentExchangeRateRsdEurAsync() {
            this.GetCurrentExchangeRateRsdEurAsync(null);
        }
        
        /// <remarks/>
        public void GetCurrentExchangeRateRsdEurAsync(object userState) {
            if ((this.GetCurrentExchangeRateRsdEurOperationCompleted == null)) {
                this.GetCurrentExchangeRateRsdEurOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentExchangeRateRsdEurOperationCompleted);
            }
            this.InvokeAsync("GetCurrentExchangeRateRsdEur", new object[0], this.GetCurrentExchangeRateRsdEurOperationCompleted, userState);
        }
        
        private void OnGetCurrentExchangeRateRsdEurOperationCompleted(object arg) {
            if ((this.GetCurrentExchangeRateRsdEurCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentExchangeRateRsdEurCompleted(this, new GetCurrentExchangeRateRsdEurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateRsdEurType", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateRsdEurType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> typeID) {
            object[] results = this.Invoke("GetExchangeRateRsdEurType", new object[] {
                        typeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateRsdEurTypeAsync(System.Nullable<int> typeID) {
            this.GetExchangeRateRsdEurTypeAsync(typeID, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateRsdEurTypeAsync(System.Nullable<int> typeID, object userState) {
            if ((this.GetExchangeRateRsdEurTypeOperationCompleted == null)) {
                this.GetExchangeRateRsdEurTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateRsdEurTypeOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateRsdEurType", new object[] {
                        typeID}, this.GetExchangeRateRsdEurTypeOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateRsdEurTypeOperationCompleted(object arg) {
            if ((this.GetExchangeRateRsdEurTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateRsdEurTypeCompleted(this, new GetExchangeRateRsdEurTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateByCurrencyExtended", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateByCurrencyExtended(int currencyCode, string dateFrom, string dateTo, int exchangeRateListTypeID, bool isForAllDays) {
            object[] results = this.Invoke("GetExchangeRateByCurrencyExtended", new object[] {
                        currencyCode,
                        dateFrom,
                        dateTo,
                        exchangeRateListTypeID,
                        isForAllDays});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateByCurrencyExtendedAsync(int currencyCode, string dateFrom, string dateTo, int exchangeRateListTypeID, bool isForAllDays) {
            this.GetExchangeRateByCurrencyExtendedAsync(currencyCode, dateFrom, dateTo, exchangeRateListTypeID, isForAllDays, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateByCurrencyExtendedAsync(int currencyCode, string dateFrom, string dateTo, int exchangeRateListTypeID, bool isForAllDays, object userState) {
            if ((this.GetExchangeRateByCurrencyExtendedOperationCompleted == null)) {
                this.GetExchangeRateByCurrencyExtendedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateByCurrencyExtendedOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateByCurrencyExtended", new object[] {
                        currencyCode,
                        dateFrom,
                        dateTo,
                        exchangeRateListTypeID,
                        isForAllDays}, this.GetExchangeRateByCurrencyExtendedOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateByCurrencyExtendedOperationCompleted(object arg) {
            if ((this.GetExchangeRateByCurrencyExtendedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateByCurrencyExtendedCompleted(this, new GetExchangeRateByCurrencyExtendedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://communicationoffice.nbs.rs/GetExchangeRateAverage", RequestNamespace="http://communicationoffice.nbs.rs", ResponseNamespace="http://communicationoffice.nbs.rs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExchangeRateAverage(int currencyCode, string dateFrom, string dateTo) {
            object[] results = this.Invoke("GetExchangeRateAverage", new object[] {
                        currencyCode,
                        dateFrom,
                        dateTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateAverageAsync(int currencyCode, string dateFrom, string dateTo) {
            this.GetExchangeRateAverageAsync(currencyCode, dateFrom, dateTo, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateAverageAsync(int currencyCode, string dateFrom, string dateTo, object userState) {
            if ((this.GetExchangeRateAverageOperationCompleted == null)) {
                this.GetExchangeRateAverageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateAverageOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateAverage", new object[] {
                        currencyCode,
                        dateFrom,
                        dateTo}, this.GetExchangeRateAverageOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateAverageOperationCompleted(object arg) {
            if ((this.GetExchangeRateAverageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateAverageCompleted(this, new GetExchangeRateAverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://communicationoffice.nbs.rs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://communicationoffice.nbs.rs", IsNullable=false)]
    public partial class AuthenticationHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string userNameField;
        
        private string passwordField;
        
        private System.Guid licenceIDField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid LicenceID {
            get {
                return this.licenceIDField;
            }
            set {
                this.licenceIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceVersionCompletedEventHandler(object sender, GetServiceVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateListCountCompletedEventHandler(object sender, GetExchangeRateListCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateListCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateListCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateListCompletedEventHandler(object sender, GetExchangeRateListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateListCommentCompletedEventHandler(object sender, GetExchangeRateListCommentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateListCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateListCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateListTypeCompletedEventHandler(object sender, GetExchangeRateListTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateListTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateListTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateByCurrencyCompletedEventHandler(object sender, GetExchangeRateByCurrencyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateByCurrencyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateByCurrencyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateByDateCompletedEventHandler(object sender, GetExchangeRateByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateByListNumberCompletedEventHandler(object sender, GetExchangeRateByListNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateByListNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateByListNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCurrentExchangeRateListCompletedEventHandler(object sender, GetCurrentExchangeRateListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentExchangeRateListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentExchangeRateListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCurrentExchangeRateCompletedEventHandler(object sender, GetCurrentExchangeRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentExchangeRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentExchangeRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCurrentExchangeRateByRateTypeCompletedEventHandler(object sender, GetCurrentExchangeRateByRateTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentExchangeRateByRateTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentExchangeRateByRateTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public decimal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateByRateTypeCompletedEventHandler(object sender, GetExchangeRateByRateTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateByRateTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateByRateTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public decimal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateRsdEurCompletedEventHandler(object sender, GetExchangeRateRsdEurCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateRsdEurCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateRsdEurCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateRsdEurByPeriodCompletedEventHandler(object sender, GetExchangeRateRsdEurByPeriodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateRsdEurByPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateRsdEurByPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCurrentExchangeRateRsdEurCompletedEventHandler(object sender, GetCurrentExchangeRateRsdEurCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentExchangeRateRsdEurCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentExchangeRateRsdEurCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateRsdEurTypeCompletedEventHandler(object sender, GetExchangeRateRsdEurTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateRsdEurTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateRsdEurTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateByCurrencyExtendedCompletedEventHandler(object sender, GetExchangeRateByCurrencyExtendedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateByCurrencyExtendedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateByCurrencyExtendedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExchangeRateAverageCompletedEventHandler(object sender, GetExchangeRateAverageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateAverageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateAverageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591